#include <iostream>
#include <cstdint>
#include <vector>

using std::cin;
using std::cout;
using std::vector;

class Graph {
 public:
  void add_edge(uint32_t from, uint32_t to) {
    adjacency_[from - 1].push_back(to - 1);
  }
  Graph(uint32_t amount_of_vertexes, uint32_t amount_of_edges) {
    amount_of_vertexes_ = amount_of_vertexes;
    amount_of_edges_ = amount_of_edges;
    adjacency_ = new vector<uint32_t>[amount_of_vertexes_];
    states_ = new uint16_t[amount_of_vertexes_];
  }
  ~Graph() {
    delete[] states_;
    delete[] adjacency_;
  }
  void Display() {
    for (uint32_t i = 0; i < amount_of_vertexes_; ++i) {
      uint32_t size = adjacency_[i].size();
      cout << "[" << i + 1 << "]: ";
      for (uint32_t j = 0; j < size; ++j) {
        cout << adjacency_[i][j] + 1 << " ";
      }
      cout << "\n";
    }
  }

 private:
  vector<uint32_t> *adjacency_ = nullptr;
  uint32_t amount_of_edges_ = 0;
  uint32_t amount_of_vertexes_ = 0;
  uint16_t *states_ = nullptr;
};

int main() {
  uint32_t n = 0;
  uint32_t m = 0;
  cin >> n >> m;
  Graph G(n, m);
  Graph TG(n, m);

  for (uint32_t i = 0; i < m; ++i) {
    uint32_t from = 0;
    uint32_t to = 0;
    cin >> from >> to;
    G.add_edge(from, to);
    TG.add_edge(to, from);
  }
  cout << "G:\n" <<;
  G.Display();
  cout << "TG:\n" <<;
  TG.Display();
  return 0;
}
